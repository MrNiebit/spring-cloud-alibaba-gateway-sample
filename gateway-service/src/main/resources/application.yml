

spring:
  redis:
    host: localhost
    port: 6379
  application:
    name: gateway-service
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8080
        username: nacos
        password: nacos
    gateway:
      discovery:
        locator:
          enabled: true  # gateway 可以从 nacos 发现微服务

      routes:
        # 路由id，确定唯一
        - id: user_service_route
          # lb 表示从 nacos 中按照名称获取微服务，并遵循负载均衡策略，
          # user-service 对应用户微服务应用名
          uri: lb://user-service
          # 断言，用于条件判断，只有断言都返回真，才会真正的执行路由
          predicates:
            - Path=/user-api/**
          # 过滤器用于修改请求和响应信息
          filters:
            - StripPrefix=1

        - id: biz_service_route
          uri: lb://biz-service
          predicates:
            - Path=/biz-api/**
          filters:
            - StripPrefix=1
            - name: RequestRateLimiter
              args:
                # # 每秒允许恢复的请求数（令牌生成速率），即每秒最多处理 2 个请求
                redis-rate-limiter.replenishRate: 2
                # # 最大突发容量，允许短时间内的最大请求数（即桶的最大容量），例如允许瞬间处理 5 个请求
                redis-rate-limiter.burstCapacity: 5
                keyResolver: '#{@ipKeyResolver}'  # 使用自定义限流key
            - name: CustomRateLimiterFilter  # 使用自定义的限流返回器


server:
  port: 9003


